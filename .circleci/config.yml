version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.15.3 # Use the AWS ECR orb in your config

jobs:
  lint:
    docker:
      # Use the same Docker base as the project
      - image: python:3.8-buster
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install dependencies and run linter
          command: |
            make setup
            make install
            make lint

  deploy-kubernetes:
    docker:
    - image: amazon/aws-cli
    steps:
    # Checkout code from git
    - checkout
    # Tools
    - run:
        name: Install tar and gzip
        command: |
          yum -y install  tar gzip unzip

    # Update Aws Cli to v2
    - run:
        name: Download aws cli2
        command: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install --bin-dir /usr/bin --install-dir /usr/bin/aws-cli --update
          aws --version
   
    - run:
        name: Install kubectl
        command: |
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            kubectl version --short --client
     
    - run:
        name: Install eksctl
        command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/bin
            eksctl version 
     
    - run: 
        name: Provision an EKS Cluster
        command: | 
            eksctl create cluster --name "dashboard-cluster-$CIRCLE_WORKFLOW_ID" --version 1.16 --region $AWS_REGION --nodegroup-name standard-workers --node-type t3.micro --nodes 2 --nodes-min 1 --nodes-max 4 --managed
     
    - run: 
        name: Connect to our cluster
        command: | 
            aws eks update-kubeconfig --name "dashboard-cluster-$CIRCLE_WORKFLOW_ID" --region $AWS_REGION
      
    - run: 
        name: Create service
        command: | 
            kubectl apply -f ./dashboard-svc.yml
            kubectl get service
     
    - run: 
        name: Create deployment
        command: | 
            kubectl apply -f ./dashboard-deployment.yml
            kubectl get deployment 

workflows:
   main:
     jobs:
       - lint
       - aws-ecr/build-and-push-image:
          requires:
            - lint
          dockerfile: Dockerfile
          path: ~/project/
          profile-name: AWS
          repo: covid19-dashboard
          tag: '${CIRCLE_SHA1}'
       - deploy-kubernetes:
          requires:
            - aws-ecr/build-and-push-image
