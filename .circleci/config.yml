version: 2.1

orbs:
  docker: circleci/docker@1.5.0

commands:
  destroy-environment:
    description: Destroy enviroment
    parameters:
      # Add parameter here 
     workflow-id:
        type: string 
    steps:
      - run:
          name: Destroy environmet
          when: on_fail
          command: |
           eksctl delete cluster "dashboard-<<parameters.workflow-id>>"

jobs:
  lint:
    docker:
      # Use the same Docker base as the project
      - image: python:3.8-buster
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install dependencies and run linter
          command: |
            make setup
            make install
            make lint

  deploy-kubernetes:
    docker:
    - image: amazon/aws-cli
    steps:
    # Checkout code from git
    - checkout
    # Tools
    - run:
        name: Install tar and gzip
        command: |
          yum -y install  tar gzip unzip

    # Update Aws Cli to v2
    - run:
        name: Download aws cli2
        command: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install --bin-dir /usr/bin --install-dir /usr/bin/aws-cli --update
          aws --version
   
    - run:
        name: Install eksctl
        command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/bin
            eksctl version 
     
    - run: 
        name: Provision an EKS Cluster
        command: | 
            eksctl create cluster --name "dashboard-$CIRCLE_WORKFLOW_ID" --version 1.16 --region $AWS_REGION --nodegroup-name standard-workers --node-type t3.micro --nodes 1 --nodes-min 1 --nodes-max 1 --managed
     
    - run: 
        name: Connect to our cluster
        command: | 
            aws eks update-kubeconfig --name "dashboard-$CIRCLE_WORKFLOW_ID" --region $AWS_REGION

    - run:
        name: Install kubectl create service and deployment
        command: |
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            kubectl version --short --client
            kubectl apply -f .circleci/files/dashboard-svc.yml
            kubectl apply -f .circleci/files/dashboard-deployment.yml
            kubectl get service      
  
  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
       # Tools
      - run:
          name: Install tar and gzip
          command: |
            yum -y install  tar gzip unzip
      - run: 
          name: Connect to our cluster
          command: | 
              aws eks update-kubeconfig --name "dashboard-$CIRCLE_WORKFLOW_ID" --region $AWS_REGION
      - run:
          name: Install eksctl
          command: |
              curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
              mv /tmp/eksctl /usr/bin
      - run:
          name: Install kubectl
          command: |
              curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/kubectl
              chmod +x ./kubectl
              mv kubectl /usr/bin
      - run: sleep 20   
      - run:
          name: Get cluster loadbalancer external ip and run smoke test
          command: |
              export URL=$(kubectl get service covid19dashboard-svc --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')
              echo "Api URL ${URL}"
              STATUS=$(curl -s -o /dev/null -w '%{http_code}' $URL)
              if (curl -s ${URL} | grep "Bokeh Application"); # test if backend is running should return json with status ok
              then
               exit 0 
              else
               exit 1
              fi
      - destroy-environment:
           workflow-id: $CIRCLE_WORKFLOW_ID

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
       - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar
            yum -y install gzip
            yum -y install curl
      - run: 
          name: Connect to our cluster
          command: | 
              aws eks update-kubeconfig --name "dashboard-$CIRCLE_WORKFLOW_ID" --region $AWS_REGION
      - run:
          name: Install kubectl
          command: |
              curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/kubectl
              chmod +x ./kubectl
              mv kubectl /usr/bin
      - run:
          name: Update Cloudfront and Clean up old stack 
          command: |
             # Re introducing this config to avoid WARNING: terminal is not fully functional
             export AWS_PAGER=""
             export URL=$(kubectl get service covid19dashboard-svc --output jsonpath='{.status.loadBalancer.ingress[0].hostname}') 
             aws cloudformation deploy \
                  --template-file .circleci/files/cloudfront.yml \
                  --stack-name "dashboard-cloudfront"  \
                  --parameter-overrides ElasticLoadBalancerDomain="${URL}" \
                  --tags project=Covid19Dashboard 
    
workflows:
   main:
     jobs:
       - lint
       - docker/publish:
          requires:
            - lint
          image: $DOCKER_REPO
          tag: latest
       - deploy-kubernetes:
          requires:
            - docker/publish
       - smoke-test:
          requires:
            - deploy-kubernetes
       - cloudfront-update:
          requires:
            - smoke-test
